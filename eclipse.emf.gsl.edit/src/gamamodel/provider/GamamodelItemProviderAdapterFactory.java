/**
 */
package gamamodel.provider;

import gamamodel.util.GamamodelAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class GamamodelItemProviderAdapterFactory extends GamamodelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public GamamodelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link gamamodel.Action} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionItemProvider actionItemProvider;

	/**
	 * This creates an adapter for a {@link gamamodel.Action}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionAdapter() {
		if (actionItemProvider == null) {
			actionItemProvider = new ActionItemProvider(this);
		}

		return actionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gamamodel.ExperimentBlock} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExperimentBlockItemProvider experimentBlockItemProvider;

	/**
	 * This creates an adapter for a {@link gamamodel.ExperimentBlock}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExperimentBlockAdapter() {
		if (experimentBlockItemProvider == null) {
			experimentBlockItemProvider = new ExperimentBlockItemProvider(this);
		}

		return experimentBlockItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gamamodel.ComplexeAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComplexeActionItemProvider complexeActionItemProvider;

	/**
	 * This creates an adapter for a {@link gamamodel.ComplexeAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComplexeActionAdapter() {
		if (complexeActionItemProvider == null) {
			complexeActionItemProvider = new ComplexeActionItemProvider(this);
		}

		return complexeActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gamamodel.Gamamodel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GamamodelItemProvider gamamodelItemProvider;

	/**
	 * This creates an adapter for a {@link gamamodel.Gamamodel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGamamodelAdapter() {
		if (gamamodelItemProvider == null) {
			gamamodelItemProvider = new GamamodelItemProvider(this);
		}

		return gamamodelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gamamodel.Output} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputItemProvider outputItemProvider;

	/**
	 * This creates an adapter for a {@link gamamodel.Output}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputAdapter() {
		if (outputItemProvider == null) {
			outputItemProvider = new OutputItemProvider(this);
		}

		return outputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gamamodel.Reflex} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReflexItemProvider reflexItemProvider;

	/**
	 * This creates an adapter for a {@link gamamodel.Reflex}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReflexAdapter() {
		if (reflexItemProvider == null) {
			reflexItemProvider = new ReflexItemProvider(this);
		}

		return reflexItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gamamodel.SpecieBlock} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SpecieBlockItemProvider specieBlockItemProvider;

	/**
	 * This creates an adapter for a {@link gamamodel.SpecieBlock}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSpecieBlockAdapter() {
		if (specieBlockItemProvider == null) {
			specieBlockItemProvider = new SpecieBlockItemProvider(this);
		}

		return specieBlockItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gamamodel.Display} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DisplayItemProvider displayItemProvider;

	/**
	 * This creates an adapter for a {@link gamamodel.Display}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDisplayAdapter() {
		if (displayItemProvider == null) {
			displayItemProvider = new DisplayItemProvider(this);
		}

		return displayItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gamamodel.GlobalVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GlobalVariableItemProvider globalVariableItemProvider;

	/**
	 * This creates an adapter for a {@link gamamodel.GlobalVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGlobalVariableAdapter() {
		if (globalVariableItemProvider == null) {
			globalVariableItemProvider = new GlobalVariableItemProvider(this);
		}

		return globalVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gamamodel.GlobalBlock} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GlobalBlockItemProvider globalBlockItemProvider;

	/**
	 * This creates an adapter for a {@link gamamodel.GlobalBlock}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGlobalBlockAdapter() {
		if (globalBlockItemProvider == null) {
			globalBlockItemProvider = new GlobalBlockItemProvider(this);
		}

		return globalBlockItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gamamodel.Exportfile} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExportfileItemProvider exportfileItemProvider;

	/**
	 * This creates an adapter for a {@link gamamodel.Exportfile}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExportfileAdapter() {
		if (exportfileItemProvider == null) {
			exportfileItemProvider = new ExportfileItemProvider(this);
		}

		return exportfileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gamamodel.Parameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterItemProvider parameterItemProvider;

	/**
	 * This creates an adapter for a {@link gamamodel.Parameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterAdapter() {
		if (parameterItemProvider == null) {
			parameterItemProvider = new ParameterItemProvider(this);
		}

		return parameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gamamodel.simpleAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected simpleActionItemProvider simpleActionItemProvider;

	/**
	 * This creates an adapter for a {@link gamamodel.simpleAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createsimpleActionAdapter() {
		if (simpleActionItemProvider == null) {
			simpleActionItemProvider = new simpleActionItemProvider(this);
		}

		return simpleActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gamamodel.Propertie} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertieItemProvider propertieItemProvider;

	/**
	 * This creates an adapter for a {@link gamamodel.Propertie}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertieAdapter() {
		if (propertieItemProvider == null) {
			propertieItemProvider = new PropertieItemProvider(this);
		}

		return propertieItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gamamodel.SpatialEntity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SpatialEntityItemProvider spatialEntityItemProvider;

	/**
	 * This creates an adapter for a {@link gamamodel.SpatialEntity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSpatialEntityAdapter() {
		if (spatialEntityItemProvider == null) {
			spatialEntityItemProvider = new SpatialEntityItemProvider(this);
		}

		return spatialEntityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gamamodel.Inspector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InspectorItemProvider inspectorItemProvider;

	/**
	 * This creates an adapter for a {@link gamamodel.Inspector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInspectorAdapter() {
		if (inspectorItemProvider == null) {
			inspectorItemProvider = new InspectorItemProvider(this);
		}

		return inspectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gamamodel.Monitor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MonitorItemProvider monitorItemProvider;

	/**
	 * This creates an adapter for a {@link gamamodel.Monitor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMonitorAdapter() {
		if (monitorItemProvider == null) {
			monitorItemProvider = new MonitorItemProvider(this);
		}

		return monitorItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (actionItemProvider != null) actionItemProvider.dispose();
		if (experimentBlockItemProvider != null) experimentBlockItemProvider.dispose();
		if (complexeActionItemProvider != null) complexeActionItemProvider.dispose();
		if (gamamodelItemProvider != null) gamamodelItemProvider.dispose();
		if (outputItemProvider != null) outputItemProvider.dispose();
		if (reflexItemProvider != null) reflexItemProvider.dispose();
		if (specieBlockItemProvider != null) specieBlockItemProvider.dispose();
		if (displayItemProvider != null) displayItemProvider.dispose();
		if (globalVariableItemProvider != null) globalVariableItemProvider.dispose();
		if (globalBlockItemProvider != null) globalBlockItemProvider.dispose();
		if (exportfileItemProvider != null) exportfileItemProvider.dispose();
		if (parameterItemProvider != null) parameterItemProvider.dispose();
		if (simpleActionItemProvider != null) simpleActionItemProvider.dispose();
		if (propertieItemProvider != null) propertieItemProvider.dispose();
		if (spatialEntityItemProvider != null) spatialEntityItemProvider.dispose();
		if (inspectorItemProvider != null) inspectorItemProvider.dispose();
		if (monitorItemProvider != null) monitorItemProvider.dispose();
	}

}
