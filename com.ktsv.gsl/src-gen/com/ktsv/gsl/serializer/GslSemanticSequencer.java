/*
 * generated by Xtext 2.21.0
 */
package com.ktsv.gsl.serializer;

import com.google.inject.Inject;
import com.ktsv.gsl.services.GslGrammarAccess;
import gamamodel.ComplexeAction;
import gamamodel.Display;
import gamamodel.ExperimentBlock;
import gamamodel.Exportfile;
import gamamodel.Gamamodel;
import gamamodel.GamamodelPackage;
import gamamodel.GlobalBlock;
import gamamodel.GlobalVariable;
import gamamodel.Monitor;
import gamamodel.Output;
import gamamodel.Propertie;
import gamamodel.Reflex;
import gamamodel.SpatialEntity;
import gamamodel.SpecieBlock;
import gamamodel.simpleAction;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class GslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GamamodelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GamamodelPackage.ACTION:
				sequence_Action_Impl(context, (gamamodel.Action) semanticObject); 
				return; 
			case GamamodelPackage.COMPLEXE_ACTION:
				sequence_ComplexeAction(context, (ComplexeAction) semanticObject); 
				return; 
			case GamamodelPackage.DISPLAY:
				sequence_Display(context, (Display) semanticObject); 
				return; 
			case GamamodelPackage.EXPERIMENT_BLOCK:
				sequence_ExperimentBlock(context, (ExperimentBlock) semanticObject); 
				return; 
			case GamamodelPackage.EXPORTFILE:
				sequence_Exportfile(context, (Exportfile) semanticObject); 
				return; 
			case GamamodelPackage.GAMAMODEL:
				sequence_Gamamodel(context, (Gamamodel) semanticObject); 
				return; 
			case GamamodelPackage.GLOBAL_BLOCK:
				sequence_GlobalBlock(context, (GlobalBlock) semanticObject); 
				return; 
			case GamamodelPackage.GLOBAL_VARIABLE:
				sequence_GlobalVariable(context, (GlobalVariable) semanticObject); 
				return; 
			case GamamodelPackage.MONITOR:
				sequence_Monitor(context, (Monitor) semanticObject); 
				return; 
			case GamamodelPackage.OUTPUT:
				sequence_Output(context, (Output) semanticObject); 
				return; 
			case GamamodelPackage.PARAMETER:
				sequence_Parameter(context, (gamamodel.Parameter) semanticObject); 
				return; 
			case GamamodelPackage.PROPERTIE:
				sequence_Propertie(context, (Propertie) semanticObject); 
				return; 
			case GamamodelPackage.REFLEX:
				sequence_Reflex(context, (Reflex) semanticObject); 
				return; 
			case GamamodelPackage.SPATIAL_ENTITY:
				sequence_SpatialEntity(context, (SpatialEntity) semanticObject); 
				return; 
			case GamamodelPackage.SPECIE_BLOCK:
				sequence_SpecieBlock(context, (SpecieBlock) semanticObject); 
				return; 
			case GamamodelPackage.SIMPLE_ACTION:
				sequence_simpleAction(context, (simpleAction) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Action returns Action
	 *     Action_Impl returns Action
	 *
	 * Constraint:
	 *     actionName=EString?
	 */
	protected void sequence_Action_Impl(ISerializationContext context, gamamodel.Action semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Action returns ComplexeAction
	 *     ComplexeAction returns ComplexeAction
	 *
	 * Constraint:
	 *     (id=EInt actionName=EString?)
	 */
	protected void sequence_ComplexeAction(ISerializationContext context, ComplexeAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Display returns Display
	 *
	 * Constraint:
	 *     (displayName=EString displayType=EString? specieblock+=SpecieBlock specieblock+=SpecieBlock*)
	 */
	protected void sequence_Display(ISerializationContext context, Display semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExperimentBlock returns ExperimentBlock
	 *
	 * Constraint:
	 *     (
	 *         experimentName=EString 
	 *         type=EString? 
	 *         hasparameter+=Parameter 
	 *         hasparameter+=Parameter* 
	 *         hasoutput+=Output 
	 *         hasoutput+=Output*
	 *     )
	 */
	protected void sequence_ExperimentBlock(ISerializationContext context, ExperimentBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Exportfile returns Exportfile
	 *
	 * Constraint:
	 *     (fileName=EString? fileType=EString?)
	 */
	protected void sequence_Exportfile(ISerializationContext context, Exportfile semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Gamamodel returns Gamamodel
	 *
	 * Constraint:
	 *     (
	 *         description=EString? 
	 *         keywords=EString? 
	 *         author=EString? 
	 *         createdOn=EDate? 
	 *         containsglobal=GlobalBlock 
	 *         containsspecie+=SpecieBlock 
	 *         containsspecie+=SpecieBlock* 
	 *         containsexperiment+=ExperimentBlock 
	 *         containsexperiment+=ExperimentBlock*
	 *     )
	 */
	protected void sequence_Gamamodel(ISerializationContext context, Gamamodel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GlobalBlock returns GlobalBlock
	 *
	 * Constraint:
	 *     (
	 *         init?='init'? 
	 *         id=EInt 
	 *         containsglobalvariable+=GlobalVariable 
	 *         containsglobalvariable+=GlobalVariable* 
	 *         hasspatialentity+=SpatialEntity 
	 *         hasspatialentity+=SpatialEntity*
	 *     )
	 */
	protected void sequence_GlobalBlock(ISerializationContext context, GlobalBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GlobalVariable returns GlobalVariable
	 *
	 * Constraint:
	 *     (gvarName=EString type=EString? initValue=EString?)
	 */
	protected void sequence_GlobalVariable(ISerializationContext context, GlobalVariable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Monitor returns Monitor
	 *
	 * Constraint:
	 *     (label=EString targetVar=EString?)
	 */
	protected void sequence_Monitor(ISerializationContext context, Monitor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Output returns Output
	 *
	 * Constraint:
	 *     (
	 *         id=EInt 
	 *         outputName=EString? 
	 *         framerate=EString? 
	 *         hasdisplays+=Display 
	 *         hasdisplays+=Display* 
	 *         hasexportfile+=Exportfile 
	 *         hasexportfile+=Exportfile* 
	 *         hasmonitor+=Monitor 
	 *         hasmonitor+=Monitor*
	 *     )
	 */
	protected void sequence_Output(ISerializationContext context, Output semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     (parameterName=EString targetVariable=EString?)
	 */
	protected void sequence_Parameter(ISerializationContext context, gamamodel.Parameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Propertie returns Propertie
	 *
	 * Constraint:
	 *     (propertieName=EString? type=EString? initValue=EString?)
	 */
	protected void sequence_Propertie(ISerializationContext context, Propertie semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Reflex
	 *     Reflex returns Reflex
	 *
	 * Constraint:
	 *     (id=EInt actionName=EString? condition=EString?)
	 */
	protected void sequence_Reflex(ISerializationContext context, Reflex semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SpatialEntity returns SpatialEntity
	 *
	 * Constraint:
	 *     (shapeName=EString shapePath=EString? type=EString?)
	 */
	protected void sequence_SpatialEntity(ISerializationContext context, SpatialEntity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SpecieBlock returns SpecieBlock
	 *
	 * Constraint:
	 *     (
	 *         aspectfunction?='aspectfunction'? 
	 *         specieBlockName=EString 
	 *         aspectName=EString? 
	 *         Color=EString? 
	 *         skillofspecie=EString? 
	 *         containsaction+=Action 
	 *         containsaction+=Action* 
	 *         haspropertie+=Propertie 
	 *         haspropertie+=Propertie*
	 *     )
	 */
	protected void sequence_SpecieBlock(ISerializationContext context, SpecieBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Action returns simpleAction
	 *     simpleAction returns simpleAction
	 *
	 * Constraint:
	 *     (id=EInt actionName=EString? ReturnType=EString?)
	 */
	protected void sequence_simpleAction(ISerializationContext context, simpleAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
